/* tslint:disable */
/* eslint-disable */
/**
 * Autoenhance API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPError,
  ImageCreatedOut,
  ImageIn,
  ImageInUpdate,
  ImageOut,
  ReportIn,
  ValidationError,
} from '../models';
import {
    HTTPErrorFromJSON,
    HTTPErrorToJSON,
    ImageCreatedOutFromJSON,
    ImageCreatedOutToJSON,
    ImageInFromJSON,
    ImageInToJSON,
    ImageInUpdateFromJSON,
    ImageInUpdateToJSON,
    ImageOutFromJSON,
    ImageOutToJSON,
    ReportInFromJSON,
    ReportInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface CreateImageRequest {
    imageIn?: ImageIn;
}

export interface DeleteImageRequest {
    id: string;
}

export interface DownloadEnhancedImageRequest {
    id: string;
    size?: DownloadEnhancedImageSizeEnum;
}

export interface DownloadOriginalImageRequest {
    id: string;
    size?: DownloadOriginalImageSizeEnum;
}

export interface DownloadPreviewImageRequest {
    id: string;
}

export interface DownloadWatermarkImageRequest {
    id: string;
}

export interface ProcessImageRequest {
    id: string;
    imageInUpdate?: ImageInUpdate;
}

export interface ReportImageRequest {
    id: string;
    reportIn?: ReportIn;
}

export interface RetrieveImageRequest {
    id: string;
}

/**
 * 
 */
export class ImagesApi extends runtime.BaseAPI {

    /**
     * Create Image
     */
    async createImageRaw(requestParameters: CreateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageCreatedOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImageInToJSON(requestParameters.imageIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageCreatedOutFromJSON(jsonValue));
    }

    /**
     * Create Image
     */
    async createImage(requestParameters: CreateImageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageCreatedOut> {
        const response = await this.createImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Image
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Image
     */
    async deleteImage(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download Enhanced Image
     */
    async downloadEnhancedImageRaw(requestParameters: DownloadEnhancedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling downloadEnhancedImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/{id}/enhanced`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download Enhanced Image
     */
    async downloadEnhancedImage(requestParameters: DownloadEnhancedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadEnhancedImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download Original Image
     */
    async downloadOriginalImageRaw(requestParameters: DownloadOriginalImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling downloadOriginalImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/images/{id}/original`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download Original Image
     */
    async downloadOriginalImage(requestParameters: DownloadOriginalImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadOriginalImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download Preview Image
     */
    async downloadPreviewImageRaw(requestParameters: DownloadPreviewImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling downloadPreviewImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/images/{id}/preview`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download Preview Image
     */
    async downloadPreviewImage(requestParameters: DownloadPreviewImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadPreviewImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download Watermark Image
     */
    async downloadWatermarkImageRaw(requestParameters: DownloadWatermarkImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling downloadWatermarkImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/images/{id}/watermark`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download Watermark Image
     */
    async downloadWatermarkImage(requestParameters: DownloadWatermarkImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadWatermarkImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process Image
     */
    async processImageRaw(requestParameters: ProcessImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageOut>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling processImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/{id}/process`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImageInUpdateToJSON(requestParameters.imageInUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageOutFromJSON(jsonValue));
    }

    /**
     * Process Image
     */
    async processImage(requestParameters: ProcessImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageOut> {
        const response = await this.processImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Report Image
     */
    async reportImageRaw(requestParameters: ReportImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reportImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/{id}/report`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportInToJSON(requestParameters.reportIn),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Report Image
     */
    async reportImage(requestParameters: ReportImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reportImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve Image
     */
    async retrieveImageRaw(requestParameters: RetrieveImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageOut>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/images/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageOutFromJSON(jsonValue));
    }

    /**
     * Retrieve Image
     */
    async retrieveImage(requestParameters: RetrieveImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageOut> {
        const response = await this.retrieveImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DownloadEnhancedImageSizeEnum = {
    Small: 'small',
    Large: 'large'
} as const;
export type DownloadEnhancedImageSizeEnum = typeof DownloadEnhancedImageSizeEnum[keyof typeof DownloadEnhancedImageSizeEnum];
/**
 * @export
 */
export const DownloadOriginalImageSizeEnum = {
    Small: 'small',
    Large: 'large'
} as const;
export type DownloadOriginalImageSizeEnum = typeof DownloadOriginalImageSizeEnum[keyof typeof DownloadOriginalImageSizeEnum];
