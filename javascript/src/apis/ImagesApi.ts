/* tslint:disable */
/* eslint-disable */
/**
 * Autoenhance API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPError,
  ImageCreatedOut,
  ImageIn,
  ImageInUpdate,
  ImageOut,
  ReportIn,
  ValidationError,
} from '../models/index';
import {
    HTTPErrorFromJSON,
    HTTPErrorToJSON,
    ImageCreatedOutFromJSON,
    ImageCreatedOutToJSON,
    ImageInFromJSON,
    ImageInToJSON,
    ImageInUpdateFromJSON,
    ImageInUpdateToJSON,
    ImageOutFromJSON,
    ImageOutToJSON,
    ReportInFromJSON,
    ReportInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateImageRequest {
    imageIn?: ImageIn;
}

export interface DeleteImageRequest {
    id: string;
}

export interface DownloadEnhancedImageRequest {
    id: string;
    quality?: number;
    format?: DownloadEnhancedImageFormatEnum;
    preview?: boolean;
    watermark?: boolean;
    maxWidth?: number;
    scale?: number;
}

export interface DownloadOriginalImageRequest {
    id: string;
    quality?: number;
    format?: DownloadOriginalImageFormatEnum;
    preview?: boolean;
    watermark?: boolean;
    maxWidth?: number;
    scale?: number;
}

export interface ReportImageRequest {
    id: string;
    reportIn?: ReportIn;
}

export interface RetrieveImageRequest {
    id: string;
}

export interface V3ImagesIdProcessPostRequest {
    id: string;
    imageInUpdate?: ImageInUpdate;
}

/**
 * 
 */
export class ImagesApi extends runtime.BaseAPI {

    /**
     * Create Image
     */
    async createImageRaw(requestParameters: CreateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageCreatedOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImageInToJSON(requestParameters['imageIn']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageCreatedOutFromJSON(jsonValue));
    }

    /**
     * Create Image
     */
    async createImage(requestParameters: CreateImageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageCreatedOut> {
        const response = await this.createImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Image
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Image
     */
    async deleteImage(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteImageRaw(requestParameters, initOverrides);
    }

    /**
     * Download Enhanced Image
     */
    async downloadEnhancedImageRaw(requestParameters: DownloadEnhancedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling downloadEnhancedImage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['quality'] != null) {
            queryParameters['quality'] = requestParameters['quality'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['preview'] != null) {
            queryParameters['preview'] = requestParameters['preview'];
        }

        if (requestParameters['watermark'] != null) {
            queryParameters['watermark'] = requestParameters['watermark'];
        }

        if (requestParameters['maxWidth'] != null) {
            queryParameters['max_width'] = requestParameters['maxWidth'];
        }

        if (requestParameters['scale'] != null) {
            queryParameters['scale'] = requestParameters['scale'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/{id}/enhanced`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download Enhanced Image
     */
    async downloadEnhancedImage(requestParameters: DownloadEnhancedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadEnhancedImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download Original Image
     */
    async downloadOriginalImageRaw(requestParameters: DownloadOriginalImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling downloadOriginalImage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['quality'] != null) {
            queryParameters['quality'] = requestParameters['quality'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['preview'] != null) {
            queryParameters['preview'] = requestParameters['preview'];
        }

        if (requestParameters['watermark'] != null) {
            queryParameters['watermark'] = requestParameters['watermark'];
        }

        if (requestParameters['maxWidth'] != null) {
            queryParameters['max_width'] = requestParameters['maxWidth'];
        }

        if (requestParameters['scale'] != null) {
            queryParameters['scale'] = requestParameters['scale'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/{id}/original`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download Original Image
     */
    async downloadOriginalImage(requestParameters: DownloadOriginalImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadOriginalImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Report Image
     */
    async reportImageRaw(requestParameters: ReportImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling reportImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/{id}/report`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportInToJSON(requestParameters['reportIn']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Report Image
     */
    async reportImage(requestParameters: ReportImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reportImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve Image
     */
    async retrieveImageRaw(requestParameters: RetrieveImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageOut>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/images/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageOutFromJSON(jsonValue));
    }

    /**
     * Retrieve Image
     */
    async retrieveImage(requestParameters: RetrieveImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageOut> {
        const response = await this.retrieveImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process Image
     */
    async v3ImagesIdProcessPostRaw(requestParameters: V3ImagesIdProcessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageOut>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v3ImagesIdProcessPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/images/{id}/process`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImageInUpdateToJSON(requestParameters['imageInUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageOutFromJSON(jsonValue));
    }

    /**
     * Process Image
     */
    async v3ImagesIdProcessPost(requestParameters: V3ImagesIdProcessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageOut> {
        const response = await this.v3ImagesIdProcessPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DownloadEnhancedImageFormatEnum = {
    Png: 'png',
    Jpeg: 'jpeg',
    Webp: 'webp'
} as const;
export type DownloadEnhancedImageFormatEnum = typeof DownloadEnhancedImageFormatEnum[keyof typeof DownloadEnhancedImageFormatEnum];
/**
 * @export
 */
export const DownloadOriginalImageFormatEnum = {
    Png: 'png',
    Jpeg: 'jpeg',
    Webp: 'webp'
} as const;
export type DownloadOriginalImageFormatEnum = typeof DownloadOriginalImageFormatEnum[keyof typeof DownloadOriginalImageFormatEnum];
