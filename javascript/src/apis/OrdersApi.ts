/* tslint:disable */
/* eslint-disable */
/**
 * Autoenhance API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPError,
  OrderBracketsOut,
  OrderHDRMerge,
  OrderIn,
  OrderOut,
  OrdersOut,
  ValidationError,
} from '../models/index';
import {
    HTTPErrorFromJSON,
    HTTPErrorToJSON,
    OrderBracketsOutFromJSON,
    OrderBracketsOutToJSON,
    OrderHDRMergeFromJSON,
    OrderHDRMergeToJSON,
    OrderInFromJSON,
    OrderInToJSON,
    OrderOutFromJSON,
    OrderOutToJSON,
    OrdersOutFromJSON,
    OrdersOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateOrderRequest {
    orderIn?: OrderIn;
}

export interface DeleteOrderRequest {
    id: string;
}

export interface ListOrdersRequest {
    offset?: string | null;
    perPage?: number;
}

export interface MergeHdrRequest {
    id: string;
    orderHDRMerge?: OrderHDRMerge;
}

export interface RetrieveOrderRequest {
    id: string;
}

export interface UpdateOrderRequest {
    id: string;
    orderIn?: OrderIn;
}

export interface V3OrdersOrderIdBracketsGetRequest {
    orderId: string;
}

/**
 * 
 */
export class OrdersApi extends runtime.BaseAPI {

    /**
     * Create Order
     */
    async createOrderRaw(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/orders/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInToJSON(requestParameters['orderIn']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Order
     */
    async createOrder(requestParameters: CreateOrderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specific order.
     * Delete Order
     */
    async deleteOrderRaw(requestParameters: DeleteOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specific order.
     * Delete Order
     */
    async deleteOrder(requestParameters: DeleteOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrderRaw(requestParameters, initOverrides);
    }

    /**
     * Lists the orders for the current user.
     * List Orders
     */
    async listOrdersRaw(requestParameters: ListOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersOut>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/orders/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersOutFromJSON(jsonValue));
    }

    /**
     * Lists the orders for the current user.
     * List Orders
     */
    async listOrders(requestParameters: ListOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersOut> {
        const response = await this.listOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger merging of the brackets in the order.
     * Merge HDR
     */
    async mergeHdrRaw(requestParameters: MergeHdrRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling mergeHdr().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/orders/{id}/merge`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderHDRMergeToJSON(requestParameters['orderHDRMerge']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Trigger merging of the brackets in the order.
     * Merge HDR
     */
    async mergeHdr(requestParameters: MergeHdrRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.mergeHdrRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific order.
     * Retrieve Order
     */
    async retrieveOrderRaw(requestParameters: RetrieveOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOut>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOutFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific order.
     * Retrieve Order
     */
    async retrieveOrder(requestParameters: RetrieveOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOut> {
        const response = await this.retrieveOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the details for the specific order.
     * Update Order
     */
    async updateOrderRaw(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOut>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v3/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInToJSON(requestParameters['orderIn']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOutFromJSON(jsonValue));
    }

    /**
     * Updates the details for the specific order.
     * Update Order
     */
    async updateOrder(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOut> {
        const response = await this.updateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific order.
     * Retrieve Order
     */
    async v3OrdersOrderIdBracketsGetRaw(requestParameters: V3OrdersOrderIdBracketsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderBracketsOut>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling v3OrdersOrderIdBracketsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/orders/{order_id}/brackets`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderBracketsOutFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific order.
     * Retrieve Order
     */
    async v3OrdersOrderIdBracketsGet(requestParameters: V3OrdersOrderIdBracketsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderBracketsOut> {
        const response = await this.v3OrdersOrderIdBracketsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
