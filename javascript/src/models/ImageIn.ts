/* tslint:disable */
/* eslint-disable */
/**
 * Autoenhance API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImageIn
 */
export interface ImageIn {
    /**
     * The version of the AI model to use for enhancing the image.
     * @type {string}
     * @memberof ImageIn
     */
    aiVersion?: string;
    /**
     * The amount of brightness boost to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    brightnessBoost?: ImageInBrightnessBoostEnum | null;
    /**
     * The amount of external brightness boost to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    brightnessBoostExternal?: ImageInBrightnessBoostExternalEnum | null;
    /**
     * The amount of external brightness boost to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    brightnessBoostInternal?: ImageInBrightnessBoostInternalEnum | null;
    /**
     * The amount of clarity to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    clarityLevel?: ImageInClarityLevelEnum | null;
    /**
     * The type of clouds in the new sky to replace the original sky with. Options include: CLEAR, LOW_CLOUD, HIGH_CLOUD
     * @type {string}
     * @memberof ImageIn
     */
    cloudType?: ImageInCloudTypeEnum | null;
    /**
     * The MIME type of the image i.e. image/jpeg, image/png, etc.
     * @type {string}
     * @memberof ImageIn
     */
    contentType?: string;
    /**
     * The amount of contrast boost to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    contrastBoost?: ImageInContrastBoostEnum | null;
    /**
     * The amount of external contrast boost to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    contrastBoostExternal?: ImageInContrastBoostExternalEnum | null;
    /**
     * The amount of internal contrast boost to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    contrastBoostInternal?: ImageInContrastBoostInternalEnum | null;
    /**
     * The amount of denoising to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    denoiseLevel?: ImageInDenoiseLevelEnum | null;
    /**
     * Whether to enhance the image.
     * @type {boolean}
     * @memberof ImageIn
     */
    enhance?: boolean;
    /**
     * The type of enhancement to apply to the image. PROPERTY or PROPERTY_USA is used with AI version < 4.0, for >= 4.0 use WARM, NEUTRAL, or AUTHENTIC.
     * @type {string}
     * @memberof ImageIn
     */
    enhanceType?: ImageInEnhanceTypeEnum;
    /**
     * Whether the image is a HDR bracket. An order_id must be provided when this is set to true.
     * @type {boolean}
     * @memberof ImageIn
     */
    hdr?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImageIn
     */
    imageName: string;
    /**
     * Correct any lens distortion in the image.
     * @type {boolean}
     * @memberof ImageIn
     */
    lensCorrection?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImageIn
     */
    orderId?: string;
    /**
     * Whether to blur any faces or license plates in the image.
     * @type {boolean}
     * @memberof ImageIn
     */
    privacy?: boolean | null;
    /**
     * A rating between 0 and 5 on how good the image enhancmeent. Higher is better.
     * @type {number}
     * @memberof ImageIn
     */
    rating?: number;
    /**
     * The amount of saturation to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    saturationLevel?: ImageInSaturationLevelEnum | null;
    /**
     * The amount of sharpening to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageIn
     */
    sharpenLevel?: ImageInSharpenLevelEnum | null;
    /**
     * Enable the replacement of the original sky for a summer sky.
     * @type {boolean}
     * @memberof ImageIn
     */
    skyReplacement?: boolean;
    /**
     * Whether the image is a 360 image.
     * @type {boolean}
     * @memberof ImageIn
     */
    threesixty?: boolean;
    /**
     * Correct any vertical distortion in the image so that it appears straight.
     * @type {boolean}
     * @memberof ImageIn
     */
    verticalCorrection?: boolean;
    /**
     * Whether to pull the windows in the image (used with AI version >= 4.0).
     * @type {boolean}
     * @memberof ImageIn
     */
    windowPull?: boolean | null;
}


/**
 * @export
 */
export const ImageInBrightnessBoostEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInBrightnessBoostEnum = typeof ImageInBrightnessBoostEnum[keyof typeof ImageInBrightnessBoostEnum];

/**
 * @export
 */
export const ImageInBrightnessBoostExternalEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInBrightnessBoostExternalEnum = typeof ImageInBrightnessBoostExternalEnum[keyof typeof ImageInBrightnessBoostExternalEnum];

/**
 * @export
 */
export const ImageInBrightnessBoostInternalEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInBrightnessBoostInternalEnum = typeof ImageInBrightnessBoostInternalEnum[keyof typeof ImageInBrightnessBoostInternalEnum];

/**
 * @export
 */
export const ImageInClarityLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInClarityLevelEnum = typeof ImageInClarityLevelEnum[keyof typeof ImageInClarityLevelEnum];

/**
 * @export
 */
export const ImageInCloudTypeEnum = {
    Clear: 'CLEAR',
    LowCloud: 'LOW_CLOUD',
    HighCloud: 'HIGH_CLOUD',
    Null: 'null'
} as const;
export type ImageInCloudTypeEnum = typeof ImageInCloudTypeEnum[keyof typeof ImageInCloudTypeEnum];

/**
 * @export
 */
export const ImageInContrastBoostEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInContrastBoostEnum = typeof ImageInContrastBoostEnum[keyof typeof ImageInContrastBoostEnum];

/**
 * @export
 */
export const ImageInContrastBoostExternalEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInContrastBoostExternalEnum = typeof ImageInContrastBoostExternalEnum[keyof typeof ImageInContrastBoostExternalEnum];

/**
 * @export
 */
export const ImageInContrastBoostInternalEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInContrastBoostInternalEnum = typeof ImageInContrastBoostInternalEnum[keyof typeof ImageInContrastBoostInternalEnum];

/**
 * @export
 */
export const ImageInDenoiseLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInDenoiseLevelEnum = typeof ImageInDenoiseLevelEnum[keyof typeof ImageInDenoiseLevelEnum];

/**
 * @export
 */
export const ImageInEnhanceTypeEnum = {
    Property: 'property',
    PropertyUsa: 'property_usa',
    Warm: 'warm',
    Neutral: 'neutral',
    Authentic: 'authentic'
} as const;
export type ImageInEnhanceTypeEnum = typeof ImageInEnhanceTypeEnum[keyof typeof ImageInEnhanceTypeEnum];

/**
 * @export
 */
export const ImageInSaturationLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInSaturationLevelEnum = typeof ImageInSaturationLevelEnum[keyof typeof ImageInSaturationLevelEnum];

/**
 * @export
 */
export const ImageInSharpenLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Null: 'null'
} as const;
export type ImageInSharpenLevelEnum = typeof ImageInSharpenLevelEnum[keyof typeof ImageInSharpenLevelEnum];


/**
 * Check if a given object implements the ImageIn interface.
 */
export function instanceOfImageIn(value: object): value is ImageIn {
    if (!('imageName' in value) || value['imageName'] === undefined) return false;
    return true;
}

export function ImageInFromJSON(json: any): ImageIn {
    return ImageInFromJSONTyped(json, false);
}

export function ImageInFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageIn {
    if (json == null) {
        return json;
    }
    return {
        
        'aiVersion': json['ai_version'] == null ? undefined : json['ai_version'],
        'brightnessBoost': json['brightness_boost'] == null ? undefined : json['brightness_boost'],
        'brightnessBoostExternal': json['brightness_boost_external'] == null ? undefined : json['brightness_boost_external'],
        'brightnessBoostInternal': json['brightness_boost_internal'] == null ? undefined : json['brightness_boost_internal'],
        'clarityLevel': json['clarity_level'] == null ? undefined : json['clarity_level'],
        'cloudType': json['cloud_type'] == null ? undefined : json['cloud_type'],
        'contentType': json['content_type'] == null ? undefined : json['content_type'],
        'contrastBoost': json['contrast_boost'] == null ? undefined : json['contrast_boost'],
        'contrastBoostExternal': json['contrast_boost_external'] == null ? undefined : json['contrast_boost_external'],
        'contrastBoostInternal': json['contrast_boost_internal'] == null ? undefined : json['contrast_boost_internal'],
        'denoiseLevel': json['denoise_level'] == null ? undefined : json['denoise_level'],
        'enhance': json['enhance'] == null ? undefined : json['enhance'],
        'enhanceType': json['enhance_type'] == null ? undefined : json['enhance_type'],
        'hdr': json['hdr'] == null ? undefined : json['hdr'],
        'imageName': json['image_name'],
        'lensCorrection': json['lens_correction'] == null ? undefined : json['lens_correction'],
        'orderId': json['order_id'] == null ? undefined : json['order_id'],
        'privacy': json['privacy'] == null ? undefined : json['privacy'],
        'rating': json['rating'] == null ? undefined : json['rating'],
        'saturationLevel': json['saturation_level'] == null ? undefined : json['saturation_level'],
        'sharpenLevel': json['sharpen_level'] == null ? undefined : json['sharpen_level'],
        'skyReplacement': json['sky_replacement'] == null ? undefined : json['sky_replacement'],
        'threesixty': json['threesixty'] == null ? undefined : json['threesixty'],
        'verticalCorrection': json['vertical_correction'] == null ? undefined : json['vertical_correction'],
        'windowPull': json['window_pull'] == null ? undefined : json['window_pull'],
    };
}

export function ImageInToJSON(value?: ImageIn | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'ai_version': value['aiVersion'],
        'brightness_boost': value['brightnessBoost'],
        'brightness_boost_external': value['brightnessBoostExternal'],
        'brightness_boost_internal': value['brightnessBoostInternal'],
        'clarity_level': value['clarityLevel'],
        'cloud_type': value['cloudType'],
        'content_type': value['contentType'],
        'contrast_boost': value['contrastBoost'],
        'contrast_boost_external': value['contrastBoostExternal'],
        'contrast_boost_internal': value['contrastBoostInternal'],
        'denoise_level': value['denoiseLevel'],
        'enhance': value['enhance'],
        'enhance_type': value['enhanceType'],
        'hdr': value['hdr'],
        'image_name': value['imageName'],
        'lens_correction': value['lensCorrection'],
        'order_id': value['orderId'],
        'privacy': value['privacy'],
        'rating': value['rating'],
        'saturation_level': value['saturationLevel'],
        'sharpen_level': value['sharpenLevel'],
        'sky_replacement': value['skyReplacement'],
        'threesixty': value['threesixty'],
        'vertical_correction': value['verticalCorrection'],
        'window_pull': value['windowPull'],
    };
}

