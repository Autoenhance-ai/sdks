/* tslint:disable */
/* eslint-disable */
/**
 * Autoenhance API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImageOut
 */
export interface ImageOut {
    /**
     * The version of the AI to use.
     * @type {number}
     * @memberof ImageOut
     */
    aiVersion?: ImageOutAiVersionEnum;
    /**
     * Whether the sky replacement feature was enabled for the image.
     * @type {boolean}
     * @memberof ImageOut
     */
    skyReplacement?: boolean;
    /**
     * Whether the vertical correction feature was enabled for the image.
     * @type {boolean}
     * @memberof ImageOut
     */
    verticalCorrection?: boolean;
    /**
     * Correct any lens distortion in the image.
     * @type {boolean}
     * @memberof ImageOut
     */
    lensCorrection?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ImageOut
     */
    vibrant?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    enhanceType?: string;
    /**
     * The amount of contrast boost to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageOut
     */
    contrastBoost?: ImageOutContrastBoostEnum;
    /**
     * The amount of brightness boost to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageOut
     */
    brightnessBoost?: ImageOutBrightnessBoostEnum;
    /**
     * The amount of saturation to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageOut
     */
    saturationLevel?: ImageOutSaturationLevelEnum;
    /**
     * The amount of sharpening to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageOut
     */
    sharpenLevel?: ImageOutSharpenLevelEnum;
    /**
     * The amount of denoising to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageOut
     */
    denoiseLevel?: ImageOutDenoiseLevelEnum;
    /**
     * The amount of clarity to apply to the image. Options include: NONE, LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof ImageOut
     */
    clarityLevel?: ImageOutClarityLevelEnum;
    /**
     * Whether to blur any faces or license plates in the image.
     * @type {boolean}
     * @memberof ImageOut
     */
    privacy?: boolean;
    /**
     * The type of sky to replace the original sky with. Options include: UK_SUMMER, UK_WINTER, USA_SUMMER
     * @type {string}
     * @memberof ImageOut
     */
    skyType?: ImageOutSkyTypeEnum;
    /**
     * The type of clouds in the new sky to replace the original sky with. Options include: CLEAR, LOW_CLOUD, LOW_CLOUD_LOW_SAT, HIGH_CLOUD, EHOUSE
     * @type {string}
     * @memberof ImageOut
     */
    cloudType?: ImageOutCloudTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    contrastBoostInternal?: ImageOutContrastBoostInternalEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    contrastBoostExternal?: ImageOutContrastBoostExternalEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    brightnessBoostInternal?: ImageOutBrightnessBoostInternalEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    brightnessBoostExternal?: ImageOutBrightnessBoostExternalEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    saturationBoostLevel?: ImageOutSaturationBoostLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    skySaturationLevel?: ImageOutSkySaturationLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    imageId?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    orderId?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageOut
     */
    imageName?: string;
    /**
     * The image type for the image.
     * @type {string}
     * @memberof ImageOut
     */
    imageType?: string;
    /**
     * The date the image was registered with Autoenhance.
     * @type {number}
     * @memberof ImageOut
     */
    dateAdded?: number;
    /**
     * The detected scene of the image i.e garden, patio, kitchen, etc.
     * @type {string}
     * @memberof ImageOut
     */
    scene?: string;
    /**
     * The status of the order.
     * @type {string}
     * @memberof ImageOut
     */
    readonly status?: ImageOutStatusEnum;
    /**
     * Whether the image has been enhanced.
     * @type {boolean}
     * @memberof ImageOut
     */
    enhanced?: boolean;
    /**
     * Whether the image has an error.
     * @type {boolean}
     * @memberof ImageOut
     */
    error?: boolean;
    /**
     * Whether image has been already downloaded and paid for.
     * @type {boolean}
     * @memberof ImageOut
     */
    downloaded?: boolean;
    /**
     * A rating between 0 and 5 on how good the image enhancmeent. Higher is better.
     * @type {number}
     * @memberof ImageOut
     */
    rating?: number;
}


/**
 * @export
 */
export const ImageOutAiVersionEnum = {
    NUMBER_1_DOT_0: 1.0,
    NUMBER_1_DOT_1: 1.1,
    NUMBER_3_DOT_0: 3.0,
    NUMBER_3_DOT_1: 3.1,
    NUMBER_4_DOT_0: 4.0
} as const;
export type ImageOutAiVersionEnum = typeof ImageOutAiVersionEnum[keyof typeof ImageOutAiVersionEnum];

/**
 * @export
 */
export const ImageOutContrastBoostEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutContrastBoostEnum = typeof ImageOutContrastBoostEnum[keyof typeof ImageOutContrastBoostEnum];

/**
 * @export
 */
export const ImageOutBrightnessBoostEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutBrightnessBoostEnum = typeof ImageOutBrightnessBoostEnum[keyof typeof ImageOutBrightnessBoostEnum];

/**
 * @export
 */
export const ImageOutSaturationLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutSaturationLevelEnum = typeof ImageOutSaturationLevelEnum[keyof typeof ImageOutSaturationLevelEnum];

/**
 * @export
 */
export const ImageOutSharpenLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutSharpenLevelEnum = typeof ImageOutSharpenLevelEnum[keyof typeof ImageOutSharpenLevelEnum];

/**
 * @export
 */
export const ImageOutDenoiseLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutDenoiseLevelEnum = typeof ImageOutDenoiseLevelEnum[keyof typeof ImageOutDenoiseLevelEnum];

/**
 * @export
 */
export const ImageOutClarityLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutClarityLevelEnum = typeof ImageOutClarityLevelEnum[keyof typeof ImageOutClarityLevelEnum];

/**
 * @export
 */
export const ImageOutSkyTypeEnum = {
    UkSummer: 'UK_SUMMER',
    UkWinter: 'UK_WINTER',
    UsaSummer: 'USA_SUMMER'
} as const;
export type ImageOutSkyTypeEnum = typeof ImageOutSkyTypeEnum[keyof typeof ImageOutSkyTypeEnum];

/**
 * @export
 */
export const ImageOutCloudTypeEnum = {
    Clear: 'CLEAR',
    LowCloud: 'LOW_CLOUD',
    LowCloudLowSat: 'LOW_CLOUD_LOW_SAT',
    HighCloud: 'HIGH_CLOUD',
    Ehouse: 'EHOUSE'
} as const;
export type ImageOutCloudTypeEnum = typeof ImageOutCloudTypeEnum[keyof typeof ImageOutCloudTypeEnum];

/**
 * @export
 */
export const ImageOutContrastBoostInternalEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutContrastBoostInternalEnum = typeof ImageOutContrastBoostInternalEnum[keyof typeof ImageOutContrastBoostInternalEnum];

/**
 * @export
 */
export const ImageOutContrastBoostExternalEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutContrastBoostExternalEnum = typeof ImageOutContrastBoostExternalEnum[keyof typeof ImageOutContrastBoostExternalEnum];

/**
 * @export
 */
export const ImageOutBrightnessBoostInternalEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutBrightnessBoostInternalEnum = typeof ImageOutBrightnessBoostInternalEnum[keyof typeof ImageOutBrightnessBoostInternalEnum];

/**
 * @export
 */
export const ImageOutBrightnessBoostExternalEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutBrightnessBoostExternalEnum = typeof ImageOutBrightnessBoostExternalEnum[keyof typeof ImageOutBrightnessBoostExternalEnum];

/**
 * @export
 */
export const ImageOutSaturationBoostLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutSaturationBoostLevelEnum = typeof ImageOutSaturationBoostLevelEnum[keyof typeof ImageOutSaturationBoostLevelEnum];

/**
 * @export
 */
export const ImageOutSkySaturationLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH'
} as const;
export type ImageOutSkySaturationLevelEnum = typeof ImageOutSkySaturationLevelEnum[keyof typeof ImageOutSkySaturationLevelEnum];

/**
 * @export
 */
export const ImageOutStatusEnum = {
    Waiting: 'waiting',
    Processing: 'processing',
    Processed: 'processed',
    Error: 'error'
} as const;
export type ImageOutStatusEnum = typeof ImageOutStatusEnum[keyof typeof ImageOutStatusEnum];


/**
 * Check if a given object implements the ImageOut interface.
 */
export function instanceOfImageOut(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ImageOutFromJSON(json: any): ImageOut {
    return ImageOutFromJSONTyped(json, false);
}

export function ImageOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aiVersion': !exists(json, 'ai_version') ? undefined : json['ai_version'],
        'skyReplacement': !exists(json, 'sky_replacement') ? undefined : json['sky_replacement'],
        'verticalCorrection': !exists(json, 'vertical_correction') ? undefined : json['vertical_correction'],
        'lensCorrection': !exists(json, 'lens_correction') ? undefined : json['lens_correction'],
        'vibrant': !exists(json, 'vibrant') ? undefined : json['vibrant'],
        'enhanceType': !exists(json, 'enhance_type') ? undefined : json['enhance_type'],
        'contrastBoost': !exists(json, 'contrast_boost') ? undefined : json['contrast_boost'],
        'brightnessBoost': !exists(json, 'brightness_boost') ? undefined : json['brightness_boost'],
        'saturationLevel': !exists(json, 'saturation_level') ? undefined : json['saturation_level'],
        'sharpenLevel': !exists(json, 'sharpen_level') ? undefined : json['sharpen_level'],
        'denoiseLevel': !exists(json, 'denoise_level') ? undefined : json['denoise_level'],
        'clarityLevel': !exists(json, 'clarity_level') ? undefined : json['clarity_level'],
        'privacy': !exists(json, 'privacy') ? undefined : json['privacy'],
        'skyType': !exists(json, 'sky_type') ? undefined : json['sky_type'],
        'cloudType': !exists(json, 'cloud_type') ? undefined : json['cloud_type'],
        'contrastBoostInternal': !exists(json, 'contrast_boost_internal') ? undefined : json['contrast_boost_internal'],
        'contrastBoostExternal': !exists(json, 'contrast_boost_external') ? undefined : json['contrast_boost_external'],
        'brightnessBoostInternal': !exists(json, 'brightness_boost_internal') ? undefined : json['brightness_boost_internal'],
        'brightnessBoostExternal': !exists(json, 'brightness_boost_external') ? undefined : json['brightness_boost_external'],
        'saturationBoostLevel': !exists(json, 'saturation_boost_level') ? undefined : json['saturation_boost_level'],
        'skySaturationLevel': !exists(json, 'sky_saturation_level') ? undefined : json['sky_saturation_level'],
        'imageId': !exists(json, 'image_id') ? undefined : json['image_id'],
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'imageName': !exists(json, 'image_name') ? undefined : json['image_name'],
        'imageType': !exists(json, 'image_type') ? undefined : json['image_type'],
        'dateAdded': !exists(json, 'date_added') ? undefined : json['date_added'],
        'scene': !exists(json, 'scene') ? undefined : json['scene'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'enhanced': !exists(json, 'enhanced') ? undefined : json['enhanced'],
        'error': !exists(json, 'error') ? undefined : json['error'],
        'downloaded': !exists(json, 'downloaded') ? undefined : json['downloaded'],
        'rating': !exists(json, 'rating') ? undefined : json['rating'],
    };
}

export function ImageOutToJSON(value?: ImageOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ai_version': value.aiVersion,
        'sky_replacement': value.skyReplacement,
        'vertical_correction': value.verticalCorrection,
        'lens_correction': value.lensCorrection,
        'vibrant': value.vibrant,
        'enhance_type': value.enhanceType,
        'contrast_boost': value.contrastBoost,
        'brightness_boost': value.brightnessBoost,
        'saturation_level': value.saturationLevel,
        'sharpen_level': value.sharpenLevel,
        'denoise_level': value.denoiseLevel,
        'clarity_level': value.clarityLevel,
        'privacy': value.privacy,
        'sky_type': value.skyType,
        'cloud_type': value.cloudType,
        'contrast_boost_internal': value.contrastBoostInternal,
        'contrast_boost_external': value.contrastBoostExternal,
        'brightness_boost_internal': value.brightnessBoostInternal,
        'brightness_boost_external': value.brightnessBoostExternal,
        'saturation_boost_level': value.saturationBoostLevel,
        'sky_saturation_level': value.skySaturationLevel,
        'image_id': value.imageId,
        'order_id': value.orderId,
        'image_name': value.imageName,
        'image_type': value.imageType,
        'date_added': value.dateAdded,
        'scene': value.scene,
        'enhanced': value.enhanced,
        'error': value.error,
        'downloaded': value.downloaded,
        'rating': value.rating,
    };
}

