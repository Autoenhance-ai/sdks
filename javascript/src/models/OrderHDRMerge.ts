/* tslint:disable */
/* eslint-disable */
/**
 * Autoenhance API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderHDRMerge
 */
export interface OrderHDRMerge {
    /**
     * The version of the AI model to use for enhancing the image. Versions ending in an .x will use the latest minor version as soon as it's published.
     * @type {string}
     * @memberof OrderHDRMerge
     */
    aiVersion?: OrderHDRMergeAiVersionEnum;
    /**
     * The type of clouds in the new sky to replace the original sky with. Options include: CLEAR, LOW_CLOUD, HIGH_CLOUD
     * @type {string}
     * @memberof OrderHDRMerge
     */
    cloudType?: OrderHDRMergeCloudTypeEnum | null;
    /**
     * Whether to enhance the image.
     * @type {boolean}
     * @memberof OrderHDRMerge
     */
    enhance?: boolean;
    /**
     * The type of enhancement to apply to the image. PROPERTY or PROPERTY_USA is used with AI version < 4.0, for >= 4.0 use WARM or NEUTRAL..
     * @type {string}
     * @memberof OrderHDRMerge
     */
    enhanceType?: OrderHDRMergeEnhanceTypeEnum;
    /**
     * Correct any lens distortion in the image.
     * @type {boolean}
     * @memberof OrderHDRMerge
     */
    lensCorrection?: boolean;
    /**
     * If provided then group into an image after every specified number of brackets, if  not provided or set to 0 then we automatically group based on visual analysis.
     * @type {number}
     * @memberof OrderHDRMerge
     */
    numberOfBracketsPerImage?: number;
    /**
     * Whether to blur any faces or license plates in the image.
     * @type {boolean}
     * @memberof OrderHDRMerge
     */
    privacy?: boolean | null;
    /**
     * Enable the replacement of the original sky for a summer sky.
     * @type {boolean}
     * @memberof OrderHDRMerge
     */
    skyReplacement?: boolean;
    /**
     * Whether to upscale the image.
     * @type {boolean}
     * @memberof OrderHDRMerge
     */
    upscale?: boolean;
    /**
     * Correct any vertical distortion in the image so that it appears straight.
     * @type {boolean}
     * @memberof OrderHDRMerge
     */
    verticalCorrection?: boolean;
    /**
     * Whether to pull the windows in the image (used with AI version >= 4.0).
     * @type {boolean}
     * @memberof OrderHDRMerge
     */
    windowPull?: boolean | null;
}


/**
 * @export
 */
export const OrderHDRMergeAiVersionEnum = {
    Dev: 'dev',
    _4X: '4.x',
    _47: '4.7',
    _45: '4.5',
    _44: '4.4',
    _43: '4.3',
    _42: '4.2',
    _41: '4.1',
    _40: '4.0',
    _3X: '3.x',
    _35: '3.5',
    _34: '3.4',
    _33: '3.3',
    _32: '3.2',
    _31: '3.1',
    _30: '3.0'
} as const;
export type OrderHDRMergeAiVersionEnum = typeof OrderHDRMergeAiVersionEnum[keyof typeof OrderHDRMergeAiVersionEnum];

/**
 * @export
 */
export const OrderHDRMergeCloudTypeEnum = {
    Clear: 'CLEAR',
    LowCloud: 'LOW_CLOUD',
    HighCloud: 'HIGH_CLOUD'
} as const;
export type OrderHDRMergeCloudTypeEnum = typeof OrderHDRMergeCloudTypeEnum[keyof typeof OrderHDRMergeCloudTypeEnum];

/**
 * @export
 */
export const OrderHDRMergeEnhanceTypeEnum = {
    Property: 'property',
    PropertyUsa: 'property_usa',
    Warm: 'warm',
    Neutral: 'neutral'
} as const;
export type OrderHDRMergeEnhanceTypeEnum = typeof OrderHDRMergeEnhanceTypeEnum[keyof typeof OrderHDRMergeEnhanceTypeEnum];


/**
 * Check if a given object implements the OrderHDRMerge interface.
 */
export function instanceOfOrderHDRMerge(value: object): value is OrderHDRMerge {
    return true;
}

export function OrderHDRMergeFromJSON(json: any): OrderHDRMerge {
    return OrderHDRMergeFromJSONTyped(json, false);
}

export function OrderHDRMergeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderHDRMerge {
    if (json == null) {
        return json;
    }
    return {
        
        'aiVersion': json['ai_version'] == null ? undefined : json['ai_version'],
        'cloudType': json['cloud_type'] == null ? undefined : json['cloud_type'],
        'enhance': json['enhance'] == null ? undefined : json['enhance'],
        'enhanceType': json['enhance_type'] == null ? undefined : json['enhance_type'],
        'lensCorrection': json['lens_correction'] == null ? undefined : json['lens_correction'],
        'numberOfBracketsPerImage': json['number_of_brackets_per_image'] == null ? undefined : json['number_of_brackets_per_image'],
        'privacy': json['privacy'] == null ? undefined : json['privacy'],
        'skyReplacement': json['sky_replacement'] == null ? undefined : json['sky_replacement'],
        'upscale': json['upscale'] == null ? undefined : json['upscale'],
        'verticalCorrection': json['vertical_correction'] == null ? undefined : json['vertical_correction'],
        'windowPull': json['window_pull'] == null ? undefined : json['window_pull'],
    };
}

export function OrderHDRMergeToJSON(json: any): OrderHDRMerge {
    return OrderHDRMergeToJSONTyped(json, false);
}

export function OrderHDRMergeToJSONTyped(value?: OrderHDRMerge | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'ai_version': value['aiVersion'],
        'cloud_type': value['cloudType'],
        'enhance': value['enhance'],
        'enhance_type': value['enhanceType'],
        'lens_correction': value['lensCorrection'],
        'number_of_brackets_per_image': value['numberOfBracketsPerImage'],
        'privacy': value['privacy'],
        'sky_replacement': value['skyReplacement'],
        'upscale': value['upscale'],
        'vertical_correction': value['verticalCorrection'],
        'window_pull': value['windowPull'],
    };
}

