/* tslint:disable */
/* eslint-disable */
/**
 * Autoenhance API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ImageOut } from './ImageOut';
import {
    ImageOutFromJSON,
    ImageOutFromJSONTyped,
    ImageOutToJSON,
} from './ImageOut';

/**
 * 
 * @export
 * @interface OrderOut
 */
export interface OrderOut {
    /**
     * The creation date of the order.
     * @type {Date}
     * @memberof OrderOut
     */
    createdAt?: Date;
    /**
     * 
     * @type {Array<ImageOut>}
     * @memberof OrderOut
     */
    images?: Array<ImageOut>;
    /**
     * The processing status for the order
     * @type {boolean}
     * @memberof OrderOut
     */
    isMerging?: boolean;
    /**
     * The processing status for the order
     * @type {any}
     * @memberof OrderOut
     */
    readonly isProcessing?: any | null;
    /**
     * The last updated date of the order.
     * @type {Date}
     * @memberof OrderOut
     */
    lastUpdatedAt?: Date;
    /**
     * The name for the order.
     * @type {string}
     * @memberof OrderOut
     */
    name?: string;
    /**
     * The ID for the order.
     * @type {string}
     * @memberof OrderOut
     */
    orderId?: string;
    /**
     * The status of the order.
     * @type {string}
     * @memberof OrderOut
     */
    readonly status?: OrderOutStatusEnum;
}


/**
 * @export
 */
export const OrderOutStatusEnum = {
    Waiting: 'waiting',
    Processing: 'processing',
    Processed: 'processed',
    Error: 'error'
} as const;
export type OrderOutStatusEnum = typeof OrderOutStatusEnum[keyof typeof OrderOutStatusEnum];


/**
 * Check if a given object implements the OrderOut interface.
 */
export function instanceOfOrderOut(value: object): value is OrderOut {
    return true;
}

export function OrderOutFromJSON(json: any): OrderOut {
    return OrderOutFromJSONTyped(json, false);
}

export function OrderOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderOut {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'images': json['images'] == null ? undefined : ((json['images'] as Array<any>).map(ImageOutFromJSON)),
        'isMerging': json['is_merging'] == null ? undefined : json['is_merging'],
        'isProcessing': json['is_processing'] == null ? undefined : json['is_processing'],
        'lastUpdatedAt': json['last_updated_at'] == null ? undefined : (new Date(json['last_updated_at'])),
        'name': json['name'] == null ? undefined : json['name'],
        'orderId': json['order_id'] == null ? undefined : json['order_id'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function OrderOutToJSON(value?: Omit<OrderOut, 'is_processing'|'status'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'images': value['images'] == null ? undefined : ((value['images'] as Array<any>).map(ImageOutToJSON)),
        'is_merging': value['isMerging'],
        'last_updated_at': value['lastUpdatedAt'] == null ? undefined : ((value['lastUpdatedAt']).toISOString()),
        'name': value['name'],
        'order_id': value['orderId'],
    };
}

